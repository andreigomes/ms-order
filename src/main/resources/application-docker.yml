spring:
  application:
    name: ms-order

  datasource:
    url: jdbc:postgresql://postgres:5432/seguradora_orders
    username: seguradora_user
    password: seguradora_pass
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true

  kafka:
    bootstrap-servers: kafka:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
    consumer:
      group-id: ms-order-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.seguradora.msorder"
      auto-offset-reset: earliest

# Configurações do simulador
app:
  simulator:
    enabled: true
    payment-delay-seconds: 2
    subscription-delay-seconds: 3
    # Status fixos para testes (deixar null para comportamento aleatório)
    fixed-payment-status: null
    fixed-subscription-status: null

# Configurações de análise de fraudes (mock interno)
fraud:
  analysis:
    enabled: true
    fallback-risk-level: REGULAR

# Configurações de cache
spring:
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=10m

logging:
  level:
    com.seguradora.msorder: INFO
    org.springframework.kafka: WARN
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
