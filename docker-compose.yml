version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: seguradora-postgres
    environment:
      POSTGRES_DB: seguradora_orders
      POSTGRES_USER: seguradora_user
      POSTGRES_PASSWORD: seguradora_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - seguradora-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: seguradora-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - seguradora-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: seguradora-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - seguradora-network

  # Kafka UI (opcional, para visualização)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: seguradora-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - seguradora-network

  # Fraud API Mock (WireMock)
  fraud-api:
    build:
      context: ./fraud-api-mock
      dockerfile: Dockerfile
    container_name: seguradora-fraud-api
    ports:
      - "8081:8080"
    networks:
      - seguradora-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/__admin/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microserviço de Pedidos
  ms-order:
    build: .
    container_name: seguradora-ms-order
    depends_on:
      - postgres
      - kafka
      - fraud-api
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/seguradora_orders
      SPRING_DATASOURCE_USERNAME: seguradora_user
      SPRING_DATASOURCE_PASSWORD: seguradora_pass
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      APP_FRAUD_API_URL: http://fraud-api:8080/api/v1
    networks:
      - seguradora-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  kafka_data:

networks:
  seguradora-network:
    driver: bridge
